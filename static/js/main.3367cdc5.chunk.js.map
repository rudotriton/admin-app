{"version":3,"sources":["components/Header.js","components/Options.js","components/UserDetail.js","components/UserList.js","selectors/users.js","components/Page.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","href","OptionsWrapper","styled","div","_templateObject","StyledLabel","label","_templateObject2","StyledInput","input","_templateObject3","Checkmark","span","_templateObject4","FilterField","_templateObject5","Options","props","htmlFor","type","id","onClick","showUserIDHandler","onChange","onTextChange","value","filter","text","placeholder","UserDetailWrapper","UserDetail_templateObject","UserDetail","_ref","user","showUserID","name","email","UserList","state","isLoading","error","users","_this2","this","fetch","then","response","json","data","setState","catch","_this$state","toLowerCase","includes","filterUsers","map","components_UserDetail","key","React","Component","Page","_this","prevState","e","textFilter","target","Fragment","components_Header","components_Options","components_UserList","AppWrapper","App_templateObject","App","components_Page","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3367cdc5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <header>\n    <h1>Administration</h1>\n    <a href=\"https://github.com/rudotriton/admin-app\">GitHub Repo Page</a>\n    <hr />\n  </header>\n);\n\nexport default Header;","import React from 'react';\nimport styled from 'styled-components';\n\nconst OptionsWrapper = styled.div`\n  margin: 1rem auto;\n  width: min-content;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledLabel = styled.label`\n  width: max-content;\n  margin: 0 auto;\n  display: block;\n  position: relative;\n  padding-left: 35px;\n  margin-bottom: 1rem;\n  cursor: pointer;\n  user-select: none;\n\n  &:hover input + span {\n    background-color: #ccc;\n  }\n  & input:checked + span {\n    background-color: #2196F3;\n  }\n  & input:checked + span:after {\n    display: block;\n  }\n  & span:after {\n    left: 9px;\n    top: 5px;\n    width: 5px;\n    height: 10px;\n    border: solid white;\n    border-width: 0 3px 3px 0;\n    transform: rotate(45deg);\n  }\n`;\n\nconst StyledInput = styled.input`\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n\n`;\n\nconst Checkmark = styled.span`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 25px;\n  width: 25px;\n  background-color: #eee;\n\n  &:after {\n    content: \"\";\n    position: absolute;\n    display: none;\n  }\n`;\n\nconst FilterField = styled.input`\n  font-size: 22px;\n  outline: none;\n  margin: 1rem;\n  border: none;\n  border-bottom: 2px solid #000;\n\n  &:focus {\n    border-bottom: 2px solid crimson;\n  }\n`;\n\nconst Options = (props) => (\n  <OptionsWrapper>\n    <StyledLabel htmlFor=\"showUserID\">Show user ID\n      <StyledInput\n        type=\"checkbox\"\n        id=\"showUserID\" \n        onClick={props.showUserIDHandler}\n        />\n      <Checkmark />\n    </StyledLabel>\n      <FilterField\n        id=\"filterField\"\n        type=\"text\"\n        onChange={props.onTextChange}\n        value={props.filter.text}\n        placeholder=\"Search\"\n      />\n  </OptionsWrapper>\n)\n\nexport default Options;","import React from 'react';\nimport styled from 'styled-components';\n\nconst UserDetailWrapper = styled.div`\n  border: 1px solid #000000;\n  padding: 1rem;\n  margin-bottom: 1rem;\n`\n\nconst UserDetail = ({ user, showUserID }) => (\n  <UserDetailWrapper>\n    {\n      showUserID &&\n      <p>ID: {user.id}</p>\n    }\n    <p>Name: {user.name}</p>\n    <p>Email: {user.email}</p>\n    \n  </UserDetailWrapper>\n)\n\nexport default UserDetail;","import React from 'react';\nimport UserDetail from './UserDetail';\nimport filterUsers from '../selectors/users';\n\nclass UserList extends React.Component {\n  state = {\n    isLoading: true,\n    error: false,\n    users: []\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => {\n        return response.json();\n      })\n      .then(data => {\n        this.setState({\n          users: data,\n          isLoading: false\n        })\n      })\n      .catch(() => this.setState({ error: true }));\n  }\n  render() {\n    const { isLoading, error } = this.state;\n    const { showUserID } = this.props;\n\n    if (isLoading) {\n      return (\n        <div>...Loading...</div>\n      )\n    }\n    if (error) {\n      return (\n        <div>An error has occurred.</div>\n      )\n\n    }\n    return (\n      <div>\n        {\n          filterUsers(this.state.users, this.props.filter).map(user => \n            <UserDetail \n              key={user.id}\n              user={user}\n              showUserID={showUserID}\n            />\n          )\n        }\n      </div>\n    )\n  }\n}\n\nexport default UserList;","// function that takes an array of users and and object which has a key named 'text', then filters the array and returns every yser that has in their name the value of 'text'\nexport default (users, { text }) => {\n  return users\n    .filter(user => {\n      return user.name\n        .toLowerCase()\n        .includes(text.toLowerCase())\n    }\n  )\n}","import React from 'react';\nimport Header from './Header';\nimport Options from './Options';\nimport UserList from  './UserList';\n\nclass Page extends React.Component {\n  state = {\n    showUserID: false,\n    filter: {\n      text: ''\n    }\n  }\n  showUserIDHandler = () => {\n    this.setState(prevState => ({\n      showUserID: !prevState.showUserID\n    }))\n  }\n  onTextChange = e => {\n    const textFilter = e.target.value;\n    this.setState({\n      filter: {\n        text: textFilter\n      }\n    })\n  }\n  render() {\n    return (\n      <>\n        <Header />\n        <Options \n          showUserIDHandler={this.showUserIDHandler}\n          onTextChange={this.onTextChange}\n          filter={this.state.filter}\n        />\n        <UserList\n          showUserID={this.state.showUserID}\n          filter={this.state.filter}  \n        />\n      </>\n    );\n  };\n}\n\nexport default Page;","import React, { Component } from 'react';\nimport Page from './components/Page';\nimport styled from 'styled-components';\n\nconst AppWrapper = styled.div`\n  padding: 2rem;\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <AppWrapper>\n        <Page>\n        </Page>\n      </AppWrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}